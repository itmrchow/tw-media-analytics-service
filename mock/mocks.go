// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"github.com/ThreeDotsLabs/watermill/message"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPublisher creates a new instance of MockPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublisher {
	mock := &MockPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPublisher is an autogenerated mock type for the Publisher type
type MockPublisher struct {
	mock.Mock
}

type MockPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPublisher) EXPECT() *MockPublisher_Expecter {
	return &MockPublisher_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockPublisher
func (_mock *MockPublisher) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPublisher_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockPublisher_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockPublisher_Expecter) Close() *MockPublisher_Close_Call {
	return &MockPublisher_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockPublisher_Close_Call) Run(run func()) *MockPublisher_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPublisher_Close_Call) Return(err error) *MockPublisher_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPublisher_Close_Call) RunAndReturn(run func() error) *MockPublisher_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function for the type MockPublisher
func (_mock *MockPublisher) Publish(topic string, messages ...*message.Message) error {
	var tmpRet mock.Arguments
	if len(messages) > 0 {
		tmpRet = _mock.Called(topic, messages)
	} else {
		tmpRet = _mock.Called(topic)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, ...*message.Message) error); ok {
		r0 = returnFunc(topic, messages...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockPublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - topic
//   - messages
func (_e *MockPublisher_Expecter) Publish(topic interface{}, messages ...interface{}) *MockPublisher_Publish_Call {
	return &MockPublisher_Publish_Call{Call: _e.mock.On("Publish",
		append([]interface{}{topic}, messages...)...)}
}

func (_c *MockPublisher_Publish_Call) Run(run func(topic string, messages ...*message.Message)) *MockPublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]*message.Message)
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockPublisher_Publish_Call) Return(err error) *MockPublisher_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPublisher_Publish_Call) RunAndReturn(run func(topic string, messages ...*message.Message) error) *MockPublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}
